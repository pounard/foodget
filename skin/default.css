/*
 * Those need to be removed.
 */

body {
    /* We are never supposed to see this. */
    background: yellow;
}
body {
    padding: 0 !important;
    margin: 0 !important;
}

/*
 * Global theming.
 */

.fg-app * {
    font-family: Roboto, "Sans Regular", Arial, Helvetica;
    font-size: 16px;
}

/*
 * Global window coloring.
 */

.fg-app {
    background: #f6f5f4;
}

/*
 * Default layout, container and widget positionning.
 */

.fg-app {
    margin: 0 !important;
    min-height: 100vh;
    position: relative;
}
.fg-app > .fg-window {
    min-height: 100vh;
    /* overflow-y: scroll; */
}

.fg-window {
    display: flex;
    flex-direction: column;
}
.fg-window > .fg-window-in {
    flex: auto;
}
.fg-window > .fg-window-label {
    flex: initial;
}

.fg-window-out {
    display: flex;
    flex: auto;
}
.fg-window-out > * {
    flex: auto;
}
.fg-window-out > .fg-sidebar {
    flex: initial;
}

/*
 * Window container "fg-window-in" specific behavior. In order for containers
 * to expand gracefully, all non container items inside are "initial" (shrink
 * to fit contents), whereas all containers items are "auto" (expand to fill
 * window). This is a sensible default that avoid text labels, buttons and such
 * from being oversized, but will force all other containers to expand to bottom
 * thus avoid status bars from floating when containers contents doesn't fill
 * space itself.
 */

.fg-window-in {
    display: flex;
    flex-direction: column;
}
.fg-window-in > * {
    flex: initial;
}
.fg-window-in > .fg-notebook,
.fg-window-in > .fg-hpane,
.fg-window-in > .fg-vpane,
.fg-window-in > .fg-text,
.fg-window-in > .fg-hbox,
.fg-window-in > .fg-vbox,
.fg-window-in > .fg-flowbox,
.fg-window-in > .fg-listbox,
.fg-window-in > .fg-tableview {
    flex: auto;
}

/*
 * Note book pages are expanded vertically.
 */

.fg-notebook {
    display: flex;
    flex-direction: column;
}
.fg-notebook > * {
    flex: auto;
}
.fg-notebook > .fg-notebook-nav {
    flex: initial;
}

/*
 * Where to put this?
 */

.fg-entry-text-multi {
    flex: auto;
}

/*
 * App and defaults.
 */

.fg-app {
    background: #f6f5f4;
}
.fg-app ul, .fg-app li {
    list-style: none;
    padding: 0;
}
.fg-app p {
    margin: 0;
}
.fg-app a {
    text-decoration: none;
    color: inherit;
}
.fg-app * {
    box-sizing: border-box;
}

.fg-window-label {
    background: #000;
    padding: 0.5rem 1rem;
    text-align: center;
}
.fg-window-label, .fg-window-label * {
    color: #fff;
}

.fg-app h1,
.fg-app h2,
.fg-app h3,
.fg-app h4,
.fg-app h5,
.fg-app h6 {
    font-size: 1rem;
    padding: 0;
    margin: 0;
}

/*
 * Prefix "fg-c" tells the element is a container. All containers use the flex
 * display no matter what's inside.
 *
 * Every container will have the "flex-direction" property explicitely set in
 * this CSS file, there is no default behavior nor generic CSS class for this.
 *
 * On the opposite, a container can be configured on how to position flex items
 * within if there's no "auto" (expand) cell: at start, center or end of itself
 * which are respecitively the "fg-c-l", "fg-c-c" and "fg-c-r" CSS classes.
 *
 * On the opposite, widgets (container or not) stacked into a container will
 * have the CellAlignment and CellSizing enums for telling to its container
 * how to be sized ("auto", which means expand, or "initial" which means
 * shrink) and how to align its content (left, center, right).
 *
 * Class "fg-w-e" is for the expand sizing, "fg-w-s" for the shrink sizing.
 * Classes "fg-w-c", "fg-w-c" and "fg-w-r" are respectivily for positionning
 * their content to left, center then right.
 *
 * In an ideal world, since Window will size itself to fill completely your
 * viewport (viewport being the browser window), all containers should always
 * expand vertically. For this, we need to add yet another layer of flex
 * everywhere, this is not ideal but those cases are handled differently for
 * each container (for example, tables cannot expand magically, so they are
 * wrapped into additional divs).
 */

.fg-c-l {
    justify-content: flex-start;
}
.fg-c-c {
    justify-content: center;
}
.fg-c-r {
    justify-content: flex-end;
}

.fg-w-e {
    flex: auto;
}
.fg-w-s {
    flex: initial;
}

.fg-w-l {
    text-align: left;
}
.fg-w-c {
    text-align: center;
}
.fg-w-r {
    text-align: right;
}

/*
 * When a container contains only other containers, this class is NOT added,
 * all containers have no padding per default (a few exceptions for flow box
 * or boxes and panes).
 *
 * When they detect children not being containers, all containers except the
 * exceptions listed above will add this class and add padding to themselves.
 */
.fg-p {
    padding: 0.5rem 1rem;
}

/*
 * All table cells (listbox and tableview) will disallow text-wrap per default
 * but in order for this to gracefully display on slim screens, we will always
 * wrap table-displayed into an extra container which will have an overflow-x
 * set to scroll.
 */
table td, .fg-listbox-cell {
    white-space: nowrap;
}

/*
 * SideBar
 */

.fg-sidebar {
    border-right: 1px solid #ccc;
}

/*
 * Forms.
 */

.fg-entry-text, .fg-entry-text-multi {
    background: white;
    margin: 0.5rem 1rem;
}

/*
 * Buttons
 */

.fg-button {
    padding: 0.5rem 1rem;
    border: 1px solid #ccc;
    border-radius: 0.3rem;
    white-space: nowrap;
}

/*
 * ActionBar
 */

.fg-actionbar {
    padding: 0.5rem 1rem;
    display: flex;
    align-items: center;
}
.fg-actionbar > * {
    flex: initial;
}
.fg-actionbar > *:not(:last-child) {
    margin-right: 1rem;
}
.fg-actionbar:not(:last-child) {
    border-bottom: 1px solid #ccc;
}

/*
 * Status bar
 */

.fg-statusbar {
    padding: 0.5rem 1rem;
    display: flex;
    align-items: center;
}
.fg-statusbar > * {
    flex: initial;
}
.fg-statusbar > *:not(:first-child) {
    margin-left: 1rem;
}
.fg-statusbar:not(:last-child) {
    border-bottom: 1px solid #ccc;
}

/*
 * FlowBox
 */

.fg-flowbox {
    flex-wrap: wrap;
}
.fg-flowbox-item {
    margin: 0.5rem;
}

/*
 * ListBox
 */

.fg-listbox {
    display: table;
    width: 100%;
    background: white;
}
.fg-listbox-row {
    display: table-row;
}
.fg-listbox-cell {
    display: table-cell;
    padding: 0.5rem 1rem;
}
.fg-listbox-row > .fg-w-s {
    width: 1%;
}

/*
 * TableView
 */

.fg-tableview {
    width: 100%;
    background: white;
    border-collapse: collapse;
}
.fg-tableview thead {
    background: #f6f5f4;
}
.fg-tableview th, td {
    border: 1px solid #ccc;
    padding: 0.5rem 1rem;
}
.fg-tableview-row td.fg-w-s {
    width: 1%;
}

/*
 * NoteBook.
 */

.fg-notebook-nav {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-top: 0.5rem;
    margin-bottom: 0;
    border-bottom: 1px solid #ccc;
}
.fg-notebook-tab {
    flex: initial;
    margin: 0 0.5rem;
    border-bottom: 3px solid transparent;
}
.fg-notebook-tab a {
    padding: 0.5rem;
    display: block;
}
.fg-notebook-tab.active {
    border-bottom: 3px solid #3584e4;
}
.fg-notebook-in {
    background: #fff;
}
.fg-notebook-page {
    border: 1px solid #ccc;
}
.fg-notebook-item {
    border: none;
}
.fg-notebook:not(:last-child) {
    border-bottom: 1px solid #ccc;
}

/*
 * HorizontalPane, VerticalPane.
 */

.fg-hpane {
    display: flex;
    padding: 0;
    flex-direction: row;
}
.fg-vpane {
    display: flex;
    padding: 0;
    flex-direction: column;
}
.fg-pane-pane {
    flex: auto;
}
.fg-hpane > .fg-pane-pane:not(:first-child) {
    border-left: 1px solid #ccc;
}
.fg-vpane > .fg-pane-pane:not(:first-child) {
    border-top: 1px solid #ccc;
}

/*
 * HorizontalBoxes, VerticalBoxes.
 */

.fg-hbox {
    padding: 0.5rem 1rem;
    flex-direction: row;
}
.fg-vbox {
    padding: 0.5rem 1rem;
    flex-direction: column;
}
.fg-hbox-item {
    margin-top: 0.5rem;
    margin: 0.5rem;
}
.fg-box {
    border: 1px solid #ccc;
    border-radius: 0.3rem;
}
